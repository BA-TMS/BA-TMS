// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization { // This is a collection of TMS users
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String    @unique
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1") // By default, use US code
  telephone     String
  loads         Load[]
  users         User[]
}

model User { // Individual users at an organization
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  email         String        @unique
  password      String
  organization  Organization  @relation(fields: [orgId], references: [id])
  orgId         String
  role          UserRole      @default(USER)
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
  OWNER
}

model Load {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       Organization  @relation(fields: [ownerId], references: [id])
  ownerId     String     
  loadNum     String
  carrier     Carrier       @relation(fields: [carrierId], references: [id])
  carrierId   String
  driver      Driver?       @relation(fields: [driverId], references: [id])
  driverId    String?          // If blank, display only carrier info
  customer    Customer      @relation(fields: [customerId], references: [id])
  customerId  String
  // Can shippers and consigness be in a single table with fields indicating if they fill each role?
  shipper     Shipper?      @relation(fields: [originId], references: [id])
  originId    String?
  consignee   Consignee?    @relation(fields: [destId], references: [id])
  destId      String?
  status      LoadStatus    @default(OPENED)
  @@unique([ownerId, loadNum])  // Loads can be numbered by user, but a user can't have two loads with the same number
}

enum LoadStatus {
  OPENED
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  PAID
}

model Carrier {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String    
  address       String
  addressAddOn  String?   // E.g. suite or floor
  city          String
  state         String
  postCountry   String
  postCode      String    // Cram all digits together and format based on country
  telCountry    String    @default("1")
  telephone     String    // Cram all digits together and format based on country
  dotId         String    @unique
  taxId         String
  factor        Factor?   @relation(fields: [factorId], references: [id])
  factorId      String?
  loads         Load[]
  drivers       Driver[]
}

model Driver {
  // Do drivers need their own insurance info, or is that attached to carriers?
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String 
  license     String    @unique
  telCountry  String    @default("1")
  telephone   String
  employer    Carrier   @relation(fields: [employerId], references: [id])
  employerId  String    // Are drivers always associated with a carrier?
  loads       Load[]
}

model Customer {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String    @unique
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String
  loads         Load[]
}

model Shipper {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
  loads         Load[]
}

model Consignee {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String 
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
  loads         Load[]
}

// If, as noted in Load table, shippers and consigness can be combined, it
// might look like this.
model Location {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String
  isShipper     Boolean
  isConsignee   Boolean
  // loads         Load[]
}

model Factor {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
  carriers      Carrier[]
}

model Insurer {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
}

model CoverageMatrix {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  carrierId         String
  insurerId         String
  // How many categories of insurance need noting? Is this an enum of a table of categories?
  coverageCategory  Int       // TODO: this should be an enum (I think)
}

model Broker {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  crossing      String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
}

model Truck {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  truckNum          String
  licensePlate      String    @unique
  plateExpiry       DateTime
  inspectionExpiry  DateTime
  type              String    // TODO: This should be an enum
  iftaLicensed      Boolean   @default(false)
}

model Trailer {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  licensePlate      String        @unique
  plateExpiry       DateTime
  inspectionExpiry  DateTime
  type              String        // 1) Make an enum 2) The names of these often start w/ numbers (b/c they're trailers) so we need to have a naming scheme.
  status            TrailerStatus @default(ACTIVE)
}

enum TrailerStatus {
  ACTIVE
  NOTAVAILABLE
  INACTIVE
}

model ThirdPartyBillee {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  address       String
  addressAddOn  String?
  city          String
  state         String
  postCountry   String
  postCode      String
  telCountry    String    @default("1")
  telephone     String    @unique
}